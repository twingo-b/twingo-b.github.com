<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[twingo_b's blog]]></title>
  <link href="http://twingo-b.github.com/atom.xml" rel="self"/>
  <link href="http://twingo-b.github.com/"/>
  <updated>2013-01-01T00:51:02+09:00</updated>
  <id>http://twingo-b.github.com/</id>
  <author>
    <name><![CDATA[@twingo_b]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IAM roles for EC2 instancesを利用して、S3 Pre-signed URL生成／Direct Object Upload]]></title>
    <link href="http://twingo-b.github.com/blog/2012/12/09/iam-roles-s3/"/>
    <updated>2012-12-09T21:00:00+09:00</updated>
    <id>http://twingo-b.github.com/blog/2012/12/09/iam-roles-s3</id>
    <content type="html"><![CDATA[<p><a href="http://www.zusaar.com/event/451053">AWS Advent Calendar 2012</a>の９日目です。</p>

<p><a href="http://aws.typepad.com/aws_japan/2012/06/iam-roles-for-ec2-instances-simplified-secure-access-to-aws-service-apis-from-ec2.html">IAM roles for EC2 instances</a>（以下IAM roles）ってご存知でしょうか？
AWSを利用して開発していると、どうしてもAccessKeyId/SecretAccessKeyの扱いに困りますよね？</p>

<p>IAM rolesを利用すると、このようにプログラムやコンフィグファイルに埋め込んでいたものが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require_once 'AWSSDKforPHP/sdk.class.php';
</span><span class='line'>$s3 = new AmazonS3(array(
</span><span class='line'>  'key' =&gt; 'xxxxxx',
</span><span class='line'>  'secret' =&gt; 'xxxxxx',
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>書かなくて良くなります＾＾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require_once 'AWSSDKforPHP/sdk.class.php';
</span><span class='line'>$s3 = new AmazonS3(array(
</span><span class='line'>  'default_cache_config' =&gt; '/tmp'
</span><span class='line'>));</span></code></pre></td></tr></table></div></figure>


<p>今回は、普段良く利用しているS3 Pre-signed URL生成／Direct Object UploadがIAM rolesでもちゃんと動くか検証しないとなーと前から思っていましたので、この機会にやってみることにしました。</p>

<h3>前提条件</h3>

<p>以下の環境で動作確認を行いました。</p>

<ul>
<li>Amazon Linux AMI 2012.09</li>
<li>PHP 5.3.18</li>
<li>php-amazon-sdk-1.5.17</li>
</ul>


<h3>IAM rolesの作成</h3>

<p>詳細は、クラスメソッド開発ブログさんの<a href="http://dev.classmethod.jp/cloud/iam-roles-for-ec2-instances/">IAM roles for EC2 instancesって何？</a>を参照されると良いと思います。今回S3を利用する上でポイントとなる部分を説明します。</p>

<p>特定のバケット以下のみアクセス権を与えたいので、Edit Permissionsで、下記のように設定しました。</p>

<p>特定のバケットのみ操作を許可したい場合でも、<code>ListAllMyBuckets</code>はすべて許可しておく必要があります。<code>get_bucket_list()</code>が失敗しますので。また、特定のバケット以下のみ許可する場合に、<code>arn:aws:s3:::[bucket]</code>と<code>arn:aws:s3:::[bucket]/*</code>を両方書かないと、うまく動かなかったです＾＾；</p>

<p><img src="http://twingo-b.github.com/images/iam-roles-s3/edit_permissions.png"></p>

<p>生成されたjsonはこちらになります。</p>

<div><script src='https://gist.github.com/4244629.js'></script>
<noscript><pre><code>{
  &quot;Statement&quot;: [
    {
      &quot;Sid&quot;: &quot;Stmt1355032668784&quot;,
      &quot;Action&quot;: [
        &quot;s3:ListAllMyBuckets&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: [
        &quot;arn:aws:s3:::*&quot;
      ]
    },
    {
      &quot;Sid&quot;: &quot;Stmt1355032715622&quot;,
      &quot;Action&quot;: [
        &quot;s3:*&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: [
        &quot;arn:aws:s3:::test-twingob&quot;,
        &quot;arn:aws:s3:::test-twingob/*&quot;
      ]
    }
  ]
}</code></pre></noscript></div>


<h3>EC2インスタンスの起動</h3>

<p>ここもポイントだけ。<code>Launch Instance</code>時は<code>Classic Wizard</code>を選ばないと、<code>IAM Role</code>を選べなかったです。</p>

<p><img src="http://twingo-b.github.com/images/iam-roles-s3/ec2_iam_roles.png"></p>

<h3>セットアップ</h3>

<p>最低限、必要なものだけインストールしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum -y install php httpd php-amazon-sdk</span></code></pre></td></tr></table></div></figure>


<h3>S3 Pre-signed URL生成</h3>

<p>ここからが本題です。</p>

<p>サンプルコードはこちらです。とってもシンプルですね。</p>

<div><script src='https://gist.github.com/4244638.js'></script>
<noscript><pre><code>&lt;?php
require_once(&quot;AWSSDKforPHP/sdk.class.php&quot;);
date_default_timezone_set(&quot;Asia/Tokyo&quot;);

$bucket = &quot;test-twingob&quot;;
$file_name = &quot;test.txt&quot;;
$expiration_time = &quot;+1 minute&quot;;

$s3 = new AmazonS3(array(
    'default_cache_config' =&gt; '/tmp'
));

$opt = array('https' =&gt; true);
$response = $s3-&gt;get_object_url($bucket, $file_name, $expiration_time, $opt);

echo $response;
?&gt;
</code></pre></noscript></div>


<p>実行すると、このように1分のみ有効なURLが生成されます。
プログラム埋め込み時は固定だった<code>AWSAccessKeyId</code>も、定期的に変更されます＾＾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php get_object_url.php 
</span><span class='line'>https://test-twingob.s3.amazonaws.com/test.txt?AWSAccessKeyId=ASIAJQ4QZDDBS22LYMGA&Expires=1355056156&Signature=Zq9j1K6eG9zDjzA7uUrgIRr2i10%3D&x-amz-security-token=AQoDYXdzEC0agALr%2BzwOiErKaI1Jd1kg7Ejc1zx5TpExGmaYG2VliSjiOX%2BHZ09j9397tnGlcKthKixDTUDf49tHssOxAuyLAK5vM5jjz%2BA6CM4jZUz43%2FN4BbMWI%2FnyN2Bdf96xGrkOp1puOqoXt0hk134%2BqUEySXtSFIds8S%2B4Ijn0Oa7hlaVykkhfcx6YErTOfS6mc6U3DjkxZB9P9ia6c%2FlGEFexUzNVYi1hvgxTshBHA8bi%2FMXqhLNeY5XoDJ13S4Ym8BxD0N2P0thlEMF80xb9WcRyhuFWn4xumUSbdWYAcvXbrKR9mwbeY0qeRRUzBBAwSM%2BJM4rH8X5tLQQs4OCC7bCVx0EJIJvpkYYF</span></code></pre></td></tr></table></div></figure>


<h3>Direct Object Upload</h3>

<p>CDPの<a href="http://aws.clouddesignpattern.org/index.php/CDP:Direct_Object_Upload%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Direct Object Uploadパターン</a>になります。PHPで簡単に実現する方法ないかなーと思って探していたら、<a href="http://docs.amazonwebservices.com/AWSSDKforPHP/latest/index.html#m=S3BrowserUpload/generate_upload_parameters">S3BrowserUpload</a>を見つけました！自分でpolicyやsignature生成しなくても良いので、とっても便利！でも落とし穴が＾＾；</p>

<p>IAM rolesでAPIを利用するときに必要な<code>x-amz-security-token</code>を自動で付与してくれないんですよね。付与しない状態で動かすと、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>InvalidAccessKeyId</span></code></pre></td></tr></table></div></figure>


<p>とエラーが出力されて、アップロードに失敗します。かなりググって悩みました。</p>

<p>サンプルコードはこちらです。<code>x-amz-security-token</code>が解決できれば、すごくシンプルに書くことができました。</p>

<div><script src='https://gist.github.com/4244625.js'></script>
<noscript><pre><code>&lt;?php
require_once(&quot;AWSSDKforPHP/sdk.class.php&quot;);
require_once 'AWSSDKforPHP/extensions/s3browserupload.class.php';
date_default_timezone_set(&quot;Asia/Tokyo&quot;);

$id       = &quot;00000001&quot;;
$filename = $id.&quot;.txt&quot;;
$bucket = &quot;test-twingob&quot;;
$expiration_time = &quot;+1 minute&quot;;
$redirect   = &quot;http://twingo-b.github.com/?id=$id&quot;;

$upload = new S3BrowserUpload(array(
    'default_cache_config' =&gt; '/tmp'
));
$auth_token = $upload-&gt;auth_token;

// Generate the parameters for the upload.
$html_parameters = $upload-&gt;generate_upload_parameters($bucket, $expiration_time, array(

    // Set permissions to private.
    'acl' =&gt; AmazonS3::ACL_PRIVATE,

    // Set various HTTP headers on the uploaded file.
    'Content-Disposition' =&gt; 'attachment; filename='.$filename,
    'Content-Type' =&gt; '^text/',

    // The S3 Key to upload to. ${filename} is an S3 variable that equals the name of the file being uploaded.
    // We're also using PHP's built-in Filter extension in this example.
    'key' =&gt; $filename,

    // Where should S3 redirect to after the upload completes? The current page.
    'success_action_redirect' =&gt; $redirect,

    // Status code to send back on success. This is primarily to work around issues in Adobe® Flash®.
    'success_action_status' =&gt; 201,
    
    // For IAM roles
    'x-amz-security-token' =&gt; $auth_token
));

// Form parameters
$form_action = &quot;http://&quot;.$html_parameters['form']['action'].&quot;/&quot;;
$form_method = $html_parameters['form']['method'];
$form_enctype = $html_parameters['form']['enctype'];

?&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form action=&quot;&lt;?php print($form_action); ?&gt;&quot;
          method=&quot;&lt;?php print($form_method); ?&gt;&quot;
          enctype=&quot;&lt;?php print($form_enctype); ?&gt;&quot;&gt;
    
        &lt;?php foreach ($html_parameters['inputs'] as $name =&gt; $value): ?&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;&lt;?php print($name); ?&gt;&quot; value=&quot;&lt;?php print($value); ?&gt;&quot;&gt;
        &lt;?php endforeach; ?&gt;
    
        &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;
        &lt;input type=&quot;submit&quot; name=&quot;upload&quot; value=&quot;Upload&quot;&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></noscript></div>


<p>実行すると、このようなHTMLが生成されます。このフォームも表示後1分のみ有効です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl http://localhost/post_object.php
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"/&gt;
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>  &lt;body&gt;
</span><span class='line'>    &lt;form action="http://test-twingob.s3.amazonaws.com/"
</span><span class='line'>          method="POST"
</span><span class='line'>          enctype="multipart/form-data"&gt;
</span><span class='line'>    
</span><span class='line'>                &lt;input type="hidden" name="AWSAccessKeyId" value="ASIAJQ4QZDDBS22LYMGA"&gt;
</span><span class='line'>                &lt;input type="hidden" name="success_action_status" value="201"&gt;
</span><span class='line'>                &lt;input type="hidden" name="acl" value="private"&gt;
</span><span class='line'>                &lt;input type="hidden" name="Content-Disposition" value="attachment; filename=00000001.txt"&gt;
</span><span class='line'>                &lt;input type="hidden" name="Content-Type" value="text/"&gt;
</span><span class='line'>                &lt;input type="hidden" name="key" value="00000001.txt"&gt;
</span><span class='line'>                &lt;input type="hidden" name="success_action_redirect" value="http://twingo-b.github.com/?id=00000001"&gt;
</span><span class='line'>                &lt;input type="hidden" name="x-amz-security-token" value="AQoDYXdzEC0agALr+zwOiErKaI1Jd1kg7Ejc1zx5TpExGmaYG2VliSjiOX+HZ09j9397tnGlcKthKixDTUDf49tHssOxAuyLAK5vM5jjz+A6CM4jZUz43/N4BbMWI/nyN2Bdf96xGrkOp1puOqoXt0hk134+qUEySXtSFIds8S+4Ijn0Oa7hlaVykkhfcx6YErTOfS6mc6U3DjkxZB9P9ia6c/lGEFexUzNVYi1hvgxTshBHA8bi/MXqhLNeY5XoDJ13S4Ym8BxD0N2P0thlEMF80xb9WcRyhuFWn4xumUSbdWYAcvXbrKR9mwbeY0qeRRUzBBAwSM+JM4rH8X5tLQQs4OCC7bCVx0EJIJvpkYYF"&gt;
</span><span class='line'>                &lt;input type="hidden" name="policy" value="eyJjb25kaXRpb25zIjpbeyJidWNrZXQiOiJ0ZXN0LXR3aW5nb2IifSx7InN1Y2Nlc3NfYWN0aW9uX3N0YXR1cyI6IjIwMSJ9LHsiYWNsIjoicHJpdmF0ZSJ9LHsiQ29udGVudC1EaXNwb3NpdGlvbiI6ImF0dGFjaG1lbnQ7IGZpbGVuYW1lPTAwMDAwMDAxLnR4dCJ9LFsic3RhcnRzLXdpdGgiLCIkQ29udGVudC1UeXBlIiwidGV4dFwvIl0seyJrZXkiOiIwMDAwMDAwMS50eHQifSx7InN1Y2Nlc3NfYWN0aW9uX3JlZGlyZWN0IjoiaHR0cDpcL1wvdHdpbmdvLWIuZ2l0aHViLmNvbVwvP2lkPTAwMDAwMDAxIn0seyJ4LWFtei1zZWN1cml0eS10b2tlbiI6IkFRb0RZWGR6RUMwYWdBTHIrendPaUVyS2FJMUpkMWtnN0VqYzF6eDVUcEV4R21hWUcyVmxpU2ppT1grSFowOWo5Mzk3dG5HbGNLdGhLaXhEVFVEZjQ5dEhzc094QXV5TEFLNXZNNWpqeitBNkNNNGpaVXo0M1wvTjRCYk1XSVwvbnlOMkJkZjk2eEdya09wMXB1T3FvWHQwaGsxMzQrcVVFeVNYdFNGSWRzOFMrNElqbjBPYTdobGFWeWtraGZjeDZZRXJUT2ZTNm1jNlUzRGpreFpCOVA5aWE2Y1wvbEdFRmV4VXpOVllpMWh2Z3hUc2hCSEE4YmlcL01YcWhMTmVZNVhvREoxM1M0WW04QnhEME4yUDB0aGxFTUY4MHhiOVdjUnlodUZXbjR4dW1VU2JkV1lBY3ZYYnJLUjltd2JlWTBxZVJSVXpCQkF3U00rSk00ckg4WDV0TFFRczRPQ0M3YkNWeDBFSklKdnBrWVlGIn1dLCJleHBpcmF0aW9uIjoiMjAxMi0xMi0wOVQxMjo1Njo1OVoifQ=="&gt;
</span><span class='line'>                &lt;input type="hidden" name="signature" value="xjyu5PRSm0mZLg5s6yvbH4FUY9I="&gt;
</span><span class='line'>            
</span><span class='line'>        &lt;input type="file" name="file"&gt;
</span><span class='line'>        &lt;input type="submit" name="upload" value="Upload"&gt;
</span><span class='line'>    &lt;/form&gt;
</span><span class='line'>  &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h3>さいごに</h3>

<p>ちゃんと動いてよかった＾＾。動かなくて<code>S3BrowserUpload</code>のgithubのソースコード見てたら、authorがラスベガスのre:Inventでお会いした<a href="https://github.com/jeremeamia">Jeremy</a>さんでした。ちょっとほっこりした＾＾</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS builder.pyのコマンドラインオプション]]></title>
    <link href="http://twingo-b.github.com/blog/2012/11/20/titanium-builder-py/"/>
    <updated>2012-11-20T09:55:00+09:00</updated>
    <id>http://twingo-b.github.com/blog/2012/11/20/titanium-builder-py</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/33731">Titanium mobile &#8220;early&#8221; Advent Calendar 2012</a>用小ネタ、2個目です。</p>

<p>めずらしくiOSネタです＾＾；</p>

<p>開発環境はMacで、shellはzshを利用しています。</p>

<p>普段はMakeTiを使ってるんですが、Distributeとかもコマンドラインでやりたいなと思いました。そのためだけにTitanium Studio立ち上げるのめんどくさいですし―。</p>

<p>そんな時は直接builer.pyを動かす必要があるんですが、コマンドラインオプションを調べようとヘルプを見ると、こんな感じでオプションがよくわからない。。Androidのbuilder.pyはまだわかるのに。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/Library/Application\ Support/Titanium/mobilesdk/osx/2.1.3.GA/iphone/builder.py
</span><span class='line'>builder.py &lt;command&gt; &lt;version&gt; &lt;project_dir&gt; &lt;appid&gt; &lt;name&gt; [options]
</span><span class='line'>
</span><span class='line'>available commands:
</span><span class='line'>
</span><span class='line'>  install       install the app to itunes for testing on iphone
</span><span class='line'>  simulator     build and run on the iphone simulator
</span><span class='line'>  adhoc         build for adhoc distribution
</span><span class='line'>  distribute    build final distribution bundle
</span><span class='line'>  xcode         build from within xcode
</span><span class='line'>  run           build and run app from project folder</span></code></pre></td></tr></table></div></figure>


<p>どうしたもんかなーと思っていると、build.logの最初にそれっぽい情報が！！！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># AdHocビルドのbuild.logの例
</span><span class='line'>cd ~/path/to/[your titanium mobile Project]
</span><span class='line'>head -n 30 build/iphone/build/build.log
</span><span class='line'>================================================================================
</span><span class='line'>Appcelerator Titanium Diagnostics Build Log
</span><span class='line'>The contents of this file are useful to send to Appcelerator Support if
</span><span class='line'>reporting an issue to help us understand your environment, build settings
</span><span class='line'>and aid in debugging. Please attach this log to any issue that you report.
</span><span class='line'>================================================================================
</span><span class='line'>
</span><span class='line'>Starting build at 11/20/12 12:00
</span><span class='line'>
</span><span class='line'>Build details:
</span><span class='line'>
</span><span class='line'>   timestamp=10/02/12 16:16
</span><span class='line'>   module_apiversion=2
</span><span class='line'>   version=2.1.3
</span><span class='line'>   githash=15997d0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Script arguments:
</span><span class='line'>   /Users/$USER/Library/Application Support/Titanium/mobilesdk/osx/2.1.3.GA/iphone/builder.py
</span><span class='line'>   adhoc
</span><span class='line'>   6.0
</span><span class='line'>   ~/path/to/[your titanium mobile Project]
</span><span class='line'>   [appid]
</span><span class='line'>   [name]
</span><span class='line'>   [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]
</span><span class='line'>   [証明書の名前]
</span><span class='line'>   universal
</span><span class='line'>   /Users/$USER/Library/Keychains/login.keychain</span></code></pre></td></tr></table></div></figure>


<p>では、オプションに順番に入れたら動くかなーと思ってやってみたら、動きました！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>security unlock-keychain /Users/$USER/Library/Keychains/login.keychain
</span><span class='line'>/Users/$USER/Library/Application\ Support/Titanium/mobilesdk/osx/2.1.3.GA/iphone/builder.py "adhoc" "6.0" "~/path/to/[your titanium mobile Project]" "[appid]" "[name]" "[xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]" "[証明書の名前]" "universal" "/Users/$USER/Library/Keychains/login.keychain"</span></code></pre></td></tr></table></div></figure>


<p>security unlock-keychain ~は、事前にやっとかないと、「SystemExit: 65」になりました。build.logの最後の方に「User interaction is not allowed.」と出てましたので判断できました。</p>

<p>ipaファイルは以下に出力されてました</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~/path/to/[your titanium mobile Project]/build/iphone/build/Debug-iphoneos/[name].ipa</span></code></pre></td></tr></table></div></figure>


<p>同じように、Distributeも試してみましたが、大丈夫そう！</p>

<p>これで、コマンドライン実行＆自動化できそうですー。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第25回まっちゃ１３９勉強会に参加してきました]]></title>
    <link href="http://twingo-b.github.com/blog/2012/11/18/matcha139-25th/"/>
    <updated>2012-11-18T19:10:00+09:00</updated>
    <id>http://twingo-b.github.com/blog/2012/11/18/matcha139-25th</id>
    <content type="html"><![CDATA[<p><a href="http://matcha139.hiemalis.org/hiki/?matcha139-25th">第25回まっちゃ１３９勉強会</a>に参加して、とても勉強になったし、今後も使いそうなのでメモ。</p>

<p>Twitterのまとめは<a href="http://togetter.com/li/408532">こちら</a>。</p>

<p>テーマは、「管理者のためのDNSセキュリティ勉強会」、私は到着が開始時間に全然間に合わず、鈴木常彦先生の講演から聞きました。</p>

<p>DNSセキュリティの詳細は、識者のかたに解説譲るとして、、</p>

<h2>浸透いうな</h2>

<p>鈴木先生が啓蒙されているDNSの「浸透いうな」について、これって仕方ないのかなとずっと思ってたんですが、実はちゃんと運用できていないだけと聞いて、結構衝撃でした＾＾；</p>

<p>具体的には、「<a href="http://www.e-ontap.com/dns/propagation/">浸透いうな!</a>」や「<a href="http://jprs.jp/related-info/guide/019.pdf">JPRSの資料、ＤＮＳサーバーの引っ越し</a>」を講演中にググって確認してました。</p>

<p>実際に私が経験したものは、「<a href="http://www.e-ontap.com/dns/propagation/pinning.html">浸透いうな(その3):まずいNS設定</a>」の状況が起きていたんじゃないかなと。</p>

<p>今後もName Serverの切替する事あるでしょうし、外部に切替を依頼するときに前提条件として理解しておけば、無用なトラブルを避けられそうです。これらの資料、社内・社外共に共有したいです。</p>

<h2>共有DNSサーバーのリスク</h2>

<p>こちらも身近な脅威だなと思ったのでメモ。</p>

<p>「<a href="http://jprs.jp/tech/security/2012-06-22-shared-authoritative-dns-server.html">サービス運用上の問題に起因するドメイン名ハイジャックの危険性について</a>」</p>

<p>これできちゃうと、メールを盗聴されたりしちゃいますよね。。今メインで利用しているAWSの<a href="http://aws.amazon.com/jp/route53/">Route53</a>は比較的安全で、約２千台のサーバーを用意することで、サブドメインのサーバーが重複しないように力技で対策しているそうです。ただし、こういうご意見もいただきました。</p>

<p><img src="http://twingo-b.github.com/images/matcha139-25th/beyonddns.png"></p>

<h2>まっちゃ139の勉強会メソッド</h2>

<p>懇親会からの帰りに、代表のまっちゃだいふくさんとご一緒して、勉強会に参加されている方の間で、コミュニケーションが生まれるように工夫されている点をお聞きしたのでメモ。</p>

<ul>
<li>参加者全員の自己紹介タイム、今回参加者は、７０名以上！</li>
<li>おやつ休憩</li>
<li>質疑応答・ディスカッション</li>
<li>懇親会</li>
</ul>


<p>をスケジュールに組み込んでいるそうです。
特に自己紹介が有効で、その後各人のバックグラウンドがわかっているので、お話しやすいとのこと。今後の勉強会開催するときに、取り入れたいなと思いました。</p>

<p>以上、ぜひ次回も参加したいですー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MakeTiをAndroidで利用する]]></title>
    <link href="http://twingo-b.github.com/blog/2012/11/04/maketi/"/>
    <updated>2012-11-04T00:00:00+09:00</updated>
    <id>http://twingo-b.github.com/blog/2012/11/04/maketi</id>
    <content type="html"><![CDATA[<p><a href="http://atnd.org/events/33731">Titanium mobile &#8220;early&#8221; Advent Calendar 2012</a>用小ネタです。
<a href="https://twitter.com/astronaughts">@astronaughts</a>さんが困ってたので、他の方ももしかしたらハマるかなと＾＾；</p>

<p>開発環境はMacで、shellはzshを利用しています。</p>

<p><a href="http://developer.android.com/sdk/index.html">Andorid SDK</a>、<a href="http://www.appcelerator.com/platform/titanium-studio/">Titanium Studio</a>で必要なものはインストール済みの前提です。</p>

<p><a href="https://github.com/astronaughts/MakeTi">MakeTi</a>は@astronaughtsさんのgithubからcloneしてます。</p>

<p>MakeFileはAndroid SDKが$HOME直下にAndroidというディレクトリ名で存在することが前提で書かれています。
必要なファイル、ディレクトリにシンボリックリンクを貼って動くようにします。</p>

<div><script src='https://gist.github.com/4011292.js'></script>
<noscript><pre><code>mkdir -p ~/source
cd ~/source
git clone git://github.com/astronaughts/MakeTi.git MakeTi

ln -s ~/source/MakeTi/bin ~/path/to/[your titanium mobile Project]/bin
ln -s ~/source/MakeTi/Makefile ~/path/to/[your Titanium Mobile Project]/Makefile

# $HOME以下にandroid-sdk-macosxが配置されていることが前提
ln -s ~/android-sdk-macosx ~/Android
</code></pre></noscript></div>


<p>それでは、実際に動かしてみましょう！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/path/to/[your titanium mobile Project]
</span><span class='line'>make clean && make deploy platform=android</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで実機へのインストールがコマンドで実行できます。</p>

<h2>うまく動かなかった方へ。</h2>

<p>私みたいに2.0以前のTitanium Mobile SDKを利用していた方は、古いSDKを移動しておく必要があります。MakeTiが誤検知しちゃいますので。
SDKのインストール先が2.0から$HOME/Library/Application Support/Titaniumへ移動した影響ですねー。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mv /Library/Application\ Support/Titanium /Library/Application\ Support/Titanium_OLD</span></code></pre></td></tr></table></div></figure>


<p>ではでは〜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium MobileでDeployGateを利用する]]></title>
    <link href="http://twingo-b.github.com/blog/2012/10/01/tideploygate/"/>
    <updated>2012-10-01T00:00:00+09:00</updated>
    <id>http://twingo-b.github.com/blog/2012/10/01/tideploygate</id>
    <content type="html"><![CDATA[<p><a href="https://twitter.com/astronaughts">@astronaughts</a>さんから依頼を受け、moduleを作成したところ、ひと通りうまく動作しました＾＾。</p>

<p>検証中にちょっとハマったところがあり、<a href="https://twitter.com/DeployGate_ja">@DeployGate_ja</a>さんにドキュメントの改善要望をお問い合わせしました。</p>

<p>その後、こんなお話をいただいたので、Octpressの練習も兼ねてmoduleの作成方法を公開します。</p>

<p><img src="http://twingo-b.github.com/images/tideploygate/deploygate_ja.png"></p>

<p>サンプルソースはGitHubに置いておきましたので、<a href="https://github.com/twingo-b/tideploygate">こちら</a>をどうぞ。</p>

<p><a href="http://developer.android.com/sdk/index.html">Andorid SDK</a>、<a href="http://www.appcelerator.com/platform/titanium-studio/">Titanium Studio</a>、<a href="https://deploygate.com/">DeployGate</a>で必要なものはインストール済みの前提です。</p>

<p>開発環境はMacで、shellはzshを利用しています。</p>

<h2>Titanium Mobileのandroid moduleの作成</h2>

<h3>~/.zshrc例</h3>

<div><script src='https://gist.github.com/3805894.js'></script>
<noscript><pre><code>export ANT_OPTS=-Dfile.encoding=UTF8
export ANDROID_SDK=$HOME/android-sdk
export ANDROID_NDK=$HOME/android-ndk-r8b
export PATH=$ANDROID_SDK/tools:$PATH
alias titanium='$HOME/Library/Application\ Support/Titanium/mobilesdk/osx/2.1.2.GA/titanium.py'</code></pre></noscript></div>


<h3>moduleを作成する</h3>

<p>適当なディレクトリに移動して、<code>.zshrc</code>でalias指定した<code>titanium</code>コマンドでmoduleのテンプレートを生成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ titanium create --platform=android --type=module --name=TiDeployGate --id=local.twingob.android.tideploygate --android=$ANDROID_SDK</span></code></pre></td></tr></table></div></figure>


<p><code>Created android module project</code>と出れば成功です。</p>

<p><code>tideploygate</code>ディレクトリ以下にテンプレートが作成されました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LICENSE
</span><span class='line'>assets
</span><span class='line'>- README
</span><span class='line'>bin
</span><span class='line'>build
</span><span class='line'>build.properties
</span><span class='line'>build.xml
</span><span class='line'>dist
</span><span class='line'>documentation
</span><span class='line'>- index.md
</span><span class='line'>example
</span><span class='line'>- app.js
</span><span class='line'>hooks
</span><span class='line'>- README
</span><span class='line'>- add.py
</span><span class='line'>- install.py
</span><span class='line'>- remove.py
</span><span class='line'>- uninstall.py
</span><span class='line'>lib
</span><span class='line'>libs
</span><span class='line'>manifest
</span><span class='line'>platform
</span><span class='line'>- README
</span><span class='line'>src
</span><span class='line'>- local
</span><span class='line'>  - twingob
</span><span class='line'>      - android
</span><span class='line'>          - tideploygate
</span><span class='line'>              - ExampleProxy.java
</span><span class='line'>              - TideploygateModule.java
</span><span class='line'>timodule.xml</span></code></pre></td></tr></table></div></figure>


<p><code>build.xml</code>,<code>build.properties</code>がローカルPATHを指しており、そのままではコード共有しにくいので修正します。Titanium Studio、Eclipseなどを利用する場合は<code>.classpath</code>も同様に修正したほうが良いです。</p>

<h3>build.xmlの修正</h3>

<p>build.propertiesから環境変数を参照できるように<code>&lt;property environment="env"/&gt;</code>を追加しました。</p>

<div><script src='https://gist.github.com/3805994.js'></script>
<noscript><pre><code>&lt;project name=&quot;deploygate&quot; default=&quot;dist&quot;&gt;
        &lt;description&gt;
                Ant build script for Titanium Android module TiDeployGate
        &lt;/description&gt;

        &lt;property environment=&quot;env&quot;/&gt;
        &lt;property name=&quot;ti.module.root&quot; location=&quot;${basedir}&quot;/&gt;
        &lt;property file=&quot;build.properties&quot; /&gt;

        &lt;import file=&quot;${titanium.platform}/../module/android/build.xml&quot;/&gt;
&lt;/project&gt;</code></pre></noscript></div>


<h3>build.propertiesの修正</h3>

<div><script src='https://gist.github.com/3806005.js'></script>
<noscript><pre><code>titanium.sdk=${env.HOME}/Library/Application\ Support/Titanium/ 
titanium.os=osx
titanium.version=2.1.2.GA
android.ndk=${env.HOME}/android-ndk-r8b
android.sdk=${env.HOME}/android-sdk</code></pre></noscript></div>


<h3>timodule.xmlの修正</h3>

<p>example/app.jsからの動作確認時、リモートLogCatが利用できるように<code>&lt;uses-permission android:name="android.permission.READ_LOGS" /&gt;</code>を記載しておきます。</p>

<p><code>AndroidManifest.xml</code>はこの記述から自動生成されます。</p>

<div><script src='https://gist.github.com/3806560.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;                                                                      
&lt;ti:module xmlns:ti=&quot;http://ti.appcelerator.org&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
        &lt;!--
                Similar to tiapp.xml, but contains module/platform specific
                configuration in &lt;iphone&gt;, &lt;android&gt;, and &lt;mobileweb&gt; sections
        --&gt;
        &lt;iphone&gt;
        &lt;/iphone&gt;
        &lt;android xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
                &lt;manifest&gt;
                        &lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;
                &lt;/manifest&gt;
        &lt;/android&gt;
        &lt;mobileweb&gt;
        &lt;/mobileweb&gt;
&lt;/ti:module&gt;</code></pre></noscript></div>


<h3>libディレクトリにdeploygatesdk.jarをコピーする</h3>

<p>後ほど説明するantビルド時に、<code>lib</code>ディレクトリのjarが参照されます。</p>

<h2>moduleのソースコード変更、DeployGateの呼び出し</h2>

<p>コマンドから自動生成されるソースコードは下記２種類です。
<code>src/local/twingob/android/tideploygate</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- ExampleProxy.java
</span><span class='line'>- TideploygateModule.java</span></code></pre></td></tr></table></div></figure>


<h3>不用なサンプルファイルを削除</h3>

<p>今回はProxyは利用しないので、<code>ExampleProxy.java</code>は削除します。</p>

<p>以降は、テンプレートをTitanium Studio、Eclipseにインポートしたほうがやりやすいかと思います。</p>

<h3>TideploygateModule.javaの名前が気になるのでリファクタリング</h3>

<p>TiDeployGateModule.javaに修正しました。</p>

<h3>TiDeployGateModule#onAppCreate()にDeployGate#install()を追加</h3>

<p><strong><em> ここがTitanium MobileでDeployGateを利用する際のポイントになります。 </em></strong></p>

<p>TiDeployGateModule#onAppCreate()はApplication#onCreate()時に呼び出されます。</p>

<p>また、Titanium Mobileで生成される<code>AndroidManifest.xml</code>の<code>android:debuggable</code>は常に<code>false</code>となっています。</p>

<p>そのため、<code>DeployGatei#install(Application app)</code>ではなく、<code>DeployGate#install(Application app, DeployGateCallback callback, boolean forceApplyOnReleaseBuild)</code> を利用する必要があります。<code>deploygatesdk-javadoc.jar</code>にその旨記載がありました。</p>

<p>例では、<code>forceApplyOnReleaseBuild:true</code>となるように、<code>DeployGate.install(app,null,true)</code>と指定しました。</p>

<div><script src='https://gist.github.com/3806688.js'></script>
<noscript><pre><code>// Exec Application#onCreate()
@Kroll.onAppCreate
public static void onAppCreate(TiApplication app) {
    // put module init code that needs to run when the application is created
    Log.d(LCAT, &quot;DeployGate#install()&quot;);
    DeployGate.install(app,null,true);
}</code></pre></noscript></div>


<p>Android SDKをEclipseから開発ビルドした場合は、<code>android:debuggable</code>は<code>true</code>になるみたいです。最初DeployGateのWeb上のドキュメントだけ見て、JavaDocを読んでなかったので、なぜ動かないのかわからず、ちょっとはまりました＾＾；。ドキュメントは最初にひと通り読まないとダメですよね＞＜。</p>

<h3>クラスのコンストラクタ以外のmethodサンプルを削除して、必要なmethodを追加</h3>

<p>こちらはmoduleやDeployGateのサンプルの通りです。</p>

<div><script src='https://gist.github.com/3806719.js'></script>
<noscript><pre><code>// Methods
@Kroll.method
public void log(String mode, String message) {
    switch (LogMode.toLogMode(mode)) {
    case ERROR:
        DeployGate.logError(message);
        break;
    case WARN:
        DeployGate.logWarn(message);
        break;
    case DEBUG:
        DeployGate.logDebug(message);
        break;
    case INFO:
        DeployGate.logInfo(message);
        break;
    case VERBOSE:
        DeployGate.logVerbose(message);
        break;
    default:
        Log.d(LCAT, &quot;LogMode Error:&quot; + mode);
        return;
    }
}

@Kroll.method
public boolean isInitialized() {
    return DeployGate.isInitialized();
}

@Kroll.method
public boolean isManaged() {
    return DeployGate.isManaged();
}

@Kroll.method
public boolean isDeployGateAvailable() {
    return DeployGate.isDeployGateAvaliable();
}

@Kroll.method
public boolean isAuthorized() {
    return DeployGate.isAuthorized();
}

@Kroll.method
public String getLoginUsername() {
    return DeployGate.getLoginUsername();
}

@Kroll.method
public void refresh() {
    DeployGate.refresh();
}
</code></pre></noscript></div>


<h3>example/app.jsを記載して、moduleの動作確認を行う</h3>

<p><code>ant run</code>で動作確認できるように、js側でmoduleを呼び出します。</p>

<div><script src='https://gist.github.com/3806739.js'></script>
<noscript><pre><code>// TODO: write your module tests here
var deploygate = require('local.twingob.android.tideploygate');

Ti.API.info(&quot;module is =&gt; &quot; + deploygate);

var text = 'ログテスト';
deploygate.log('ERROR',text);
deploygate.log('WARN',text);
deploygate.log('DEBUG',text);
deploygate.log('INFO',text);
deploygate.log('VERBOSE',text);

deploygate.log('DEBUG','isInitialized:' + deploygate.isInitialized());
deploygate.log('DEBUG','isManaged:' + deploygate.isManaged());
deploygate.log('DEBUG','isDeployGateAvailable:' + deploygate.isDeployGateAvailable());
deploygate.log('DEBUG','isAuthorized:' + deploygate.isAuthorized());
deploygate.log('DEBUG','getLoginUsername:' + deploygate.getLoginUsername());
deploygate.refresh();
</code></pre></noscript></div>


<p>moduleは、テンプレートのディレクトリ直下でantコマンドを実行すると、emulatorで動作確認ができるので、実行してみます。</p>

<p>Android emulatorの起動</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ant run.emulator</span></code></pre></td></tr></table></div></figure>


<p>Terminalの別のTabでテストビルド</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ant run</span></code></pre></td></tr></table></div></figure>


<p>無事アプリは起動したのですが、emulatorのLogCatに下記のように出力され、動作しませんでした。DeployGateのクライアントアプリのインストールが必要ということですよね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DeployGate  V  DeployGate is not available on this device.</span></code></pre></td></tr></table></div></figure>


<p>そこで、<code>ant run</code>してできたapkを<code>dgate push</code>して、実機で動作確認して見ることにしました。<code>ant run</code>のログの最後の方に下記のように出力されているので、それを使ってみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> [exec] [DEBUG] /Users/[user]/android-sdk/platform-tools/adb -e install -r /var/folders/3j/cjcy2jcd6tlbkqyv1crfj1yh0000gn/T/m0sWWDXti/tideploygate/build/android/bin/app.apk  
</span><span class='line'> [exec] [INFO] Launching application ... tideploygate</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dgate push /var/folders/3j/cjcy2jcd6tlbkqyv1crfj1yh0000gn/T/m0sWWDXti/tideploygate/build/android/bin/app.apk
</span><span class='line'>Push app file successful!
</span><span class='line'>
</span><span class='line'>Name :          tideploygate
</span><span class='line'>Owner :         twingo_b
</span><span class='line'>Package :       local.twingob.android.tideploygate
</span><span class='line'>Revision :      1
</span><span class='line'>URL :           https://deploygate.com/users/twingo_b/apps/local.twingob.android.tideploygate?key=3cc6266d2d8a606a25dfcb209331bf5de954734a</span></code></pre></td></tr></table></div></figure>


<p>無事Pushできたので、アプリを実機で起動してみます。</p>

<p>動いた！</p>

<p><img src="http://twingo-b.github.com/images/tideploygate/deploygatelog.png"></p>

<p>リモートLogCatも動いた！</p>

<p><img src="http://twingo-b.github.com/images/tideploygate/remotelogcat.png"></p>

<p>うまく動いてますね＾＾。</p>

<h2>Titanium Mobileプロジェクトでの利用</h2>

<h3>実際のプロジェクトで利用するために、moduleのzipファイルを生成</h3>

<p><code>ant dist</code>コマンドで、zipファイルを生成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ant dist
</span><span class='line'>...
</span><span class='line'>zip.libs:
</span><span class='line'>      [zip] Updating zip: /Users/[user]/[path to dir]/tideploygate/dist/local.twingob.android.tideploygate-android-0.1.zip
</span><span class='line'>
</span><span class='line'>zip.metadata:
</span><span class='line'>
</span><span class='line'>post.dist:
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span></code></pre></td></tr></table></div></figure>


<p><code>dist</code>ディレクトリ以下にできたzipファイル<code>local.twingob.android.tideploygate-android-0.1.zip</code>をTitanium Mobileプロジェクト直下にコピーします。</p>

<h3>tiapp.xmlの修正</h3>

<p>moduleの指定を追加します。リモートLogCatを利用する場合は、<code>&lt;uses-permission android:name="android.permission.READ_LOGS" /&gt;</code>も記載します。</p>

<div><script src='https://gist.github.com/3806841.js'></script>
<noscript><pre><code>&lt;android xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;manifest&gt;
       &lt;uses-permission android:name=&quot;android.permission.READ_LOGS&quot; /&gt;
    &lt;/manifest&gt;
&lt;/android&gt;
&lt;modules&gt;
    &lt;module version=&quot;0.1&quot;&gt;local.twingob.android.tideploygate&lt;/module&gt;
&lt;/modules&gt;
</code></pre></noscript></div>


<p><strong><em> 実際には、Distributeビルド（リリースビルド）の際、これらの記載は削除し、module自体もビルドに含めないように、別途ビルドスクリプトを作成しています。 </em></strong></p>

<h2>さいごに</h2>

<p>DeployGateとTitanium Mobileの組み合わせは、開発をさらに加速できそうですよね！今後は<a href="https://twitter.com/astronaughts">@astronaughts</a>さんに使い倒してもらいますw</p>
]]></content>
  </entry>
  
</feed>
